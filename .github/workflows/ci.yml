name: CI

on:
  push:
    branches:
      - main
      - feature/**
      - bugfix/**
      - improvement/**
      - hotfix/**
  pull_request:
    branches:
      - main
      - feature/**
      - bugfix/**
      - improvement/**
      - hotfix/**
  issues:
    types: [labeled, unlabeled]

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: false

    - name: Check runner availability
      run: |
        echo "Checking runner availability..."
        if [ -z "$RUNNER_NAME" ]; then
          echo "No runner available. Exiting..."
          exit 1
        fi
        echo "Runner $RUNNER_NAME is available."

    - name: Log runner details
      run: |
        echo "Logging runner details..."
        echo "Runner Name: $RUNNER_NAME"
        echo "Runner OS: $RUNNER_OS"
        echo "Runner Architecture: $RUNNER_ARCH"

    - name: Install dependencies
      run: |
        echo "Installing dependencies..."
        sudo bash prerequisites.sh

    - name: Install pokeyslib
      run: |
        chmod +x install_pokeyslib.sh
        ./install_pokeyslib.sh

    - name: Build Pokeys Userspace Component
      run: sudo halcompile --install --userspace --extra-link-args="-L/usr/lib -lPoKeys -llinuxcncini" pokeys_uspace/pokeys.c

    - name: Compile Pokeys HAL Components
      run: |
        halcompile --install pokeys_homecomp.comp
        halcompile --install kbd48CNC.comp
        halcompile --install start_delay_3000.comp
        halcompile --install start_delay_5000.comp

    - name: Final Install
      run: sudo bash install.sh

    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: Logs
        path: |
          build/build.log
          build/test.log

    - name: Add logging for installation failures
      run: |
        echo "Adding logging for installation failures..."
        log_file="$HOME/linuxcnc_build.log"
        make -j$(nproc) all 2>&1 | tee "$log_file"
        if [ "${PIPESTATUS[0]}" -ne 0 ]; then
            echo "Build failed. Check the log file for details: $log_file"
            exit 1
        fi

    - name: Check for adherence to code review guidelines
      run: |
        echo "Checking for adherence to code review guidelines..."
        if ! grep -q "Code Review Guidelines" CODE_REVIEW_GUIDELINES.md; then
            echo "Code review guidelines not found. Please ensure that the guidelines are documented in CODE_REVIEW_GUIDELINES.md."
            exit 1
        fi
        echo "Code review guidelines are documented and accessible."

    - name: Verify conformity with LinuxCNC guidelines and Canonical Device Interface
      run: |
        echo "Verifying conformity with LinuxCNC guidelines and Canonical Device Interface..."
        if ! grep -q "Canonical Device Interface" README.md; then
            echo "Canonical Device Interface not mentioned in README.md. Please ensure that the guidelines are documented."
            exit 1
        fi
        echo "Canonical Device Interface guidelines are documented and accessible."

    - name: Trigger CI pipeline based on issue status updates
      run: |
        echo "Triggering CI pipeline based on issue status updates..."
        if [ "${{ github.event.issue.labels }}" == "in progress" ]; then
            echo "Issue is in progress. Triggering build and tests..."
            # Add your build and test commands here
        elif [ "${{ github.event.issue.labels }}" == "in review" ]; then
            echo "Issue is in review. Triggering deployment to staging..."
            # Add your deployment commands here
        fi

    - name: Send alerts for pipeline failures related to issues
      run: |
        echo "Sending alerts for pipeline failures related to issues..."
        if [ "${{ github.event.issue.labels }}" == "failed CI" ]; then
            echo "Pipeline failed. Sending alerts to contributors..."
            # Add your alerting commands here (e.g., Slack, email, GitHub notifications)
        fi

    - name: Auto-close issues upon deployment
      run: |
        echo "Auto-closing issues upon deployment..."
        if [ "${{ github.event.issue.labels }}" == "in production" ]; then
            echo "Issue deployed to production. Auto-closing issue..."
            # Add your auto-closing commands here
        fi
