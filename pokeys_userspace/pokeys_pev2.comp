component pokeys_pev2 "PEv2 component for PoKeys";

option userspace yes;

pin in float pokeys.[DevID].pev2.position-cmd.# [8];
pin out float pokeys.[DevID].pev2.position-fb.# [8];
pin out bit pokeys.[DevID].pev2.homing-status.# [8];

pin out unsigned pokeys.[DevID].info.PinCount;
pin out unsigned pokeys.[DevID].info.PWMCount;
pin out unsigned pokeys.[DevID].info.BasicEncoderCount;
pin out unsigned pokeys.[DevID].info.EncodersCount;
pin out unsigned pokeys.[DevID].info.FastEncoders;
pin out unsigned pokeys.[DevID].info.UltraFastEncoders;
pin out unsigned pokeys.[DevID].info.PWMinternalFrequency;
pin out unsigned pokeys.[DevID].info.AnalogInputs;
pin out bit pokeys.[DevID].info.KeyMapping;
pin out bit pokeys.[DevID].info.TriggeredKeyMapping;
pin out bit pokeys.[DevID].info.KeyRepeatDelay;
pin out bit pokeys.[DevID].info.DigitalCounters;
pin out bit pokeys.[DevID].info.JoystickButtonAxisMapping;
pin out bit pokeys.[DevID].info.JoystickAnalogToDigitalMapping;
pin out bit pokeys.[DevID].info.Macros;
pin out bit pokeys.[DevID].info.MatrixKeyboard;
pin out bit pokeys.[DevID].info.MatrixKeyboardTriggeredMapping;
pin out bit pokeys.[DevID].info.LCD;
pin out bit pokeys.[DevID].info.MatrixLED;
pin out bit pokeys.[DevID].info.ConnectionSignal;
pin out bit pokeys.[DevID].info.PoExtBus;
pin out bit pokeys.[DevID].info.PoNET;
pin out bit pokeys.[DevID].info.AnalogFiltering;
pin out bit pokeys.[DevID].info.InitOutputsStart;
pin out bit pokeys.[DevID].info.protI2C;
pin out bit pokeys.[DevID].info.prot1wire;
pin out bit pokeys.[DevID].info.AdditionalOptions;
pin out bit pokeys.[DevID].info.LoadStatus;
pin out bit pokeys.[DevID].info.CustomDeviceName;
pin out bit pokeys.[DevID].info.PoTLog27support;
pin out bit pokeys.[DevID].info.SensorList;
pin out bit pokeys.[DevID].info.WebInterface;
pin out bit pokeys.[DevID].info.FailSafeSettings;
pin out bit pokeys.[DevID].info.JoystickHATswitch;
pin out bit pokeys.[DevID].info.PulseEngine;
pin out bit pokeys.[DevID].info.PulseEnginev2;
pin out bit pokeys.[DevID].info.EasySensors;

pin out unsigned pokeys.[DevID].PEv2.nrOfAxes;
pin out unsigned pokeys.[DevID].PEv2.maxPulseFrequency;
pin out unsigned pokeys.[DevID].PEv2.bufferDepth;
pin out unsigned pokeys.[DevID].PEv2.slotTiming;
pin out bit pokeys.[DevID].PEv2.digin.Emergency.in;
pin out bit pokeys.[DevID].PEv2.digin.Emergency.in_not;
pin out bit pokeys.[DevID].PEv2.PulseEngineEnabled;
pin out bit pokeys.[DevID].PEv2.PulseGeneratorType;
pin out bit pokeys.[DevID].PEv2.PG_swap_stepdir;
pin out bit pokeys.[DevID].PEv2.PG_extended_io;
pin out bit pokeys.[DevID].PEv2.ChargePumpEnabled;
pin out bit pokeys.[DevID].PEv2.PulseEngineActivated;
pin out unsigned pokeys.[DevID].PEv2.PulseEngineState;
pin out unsigned pokeys.[DevID].PEv2.MiscInputStatus;
pin out bit pokeys.[DevID].PEv2.digin.Misc_in[8];
pin out bit pokeys.[DevID].PEv2.digin.Misc_in_not[8];
pin out bit pokeys.[DevID].PEv2.LimitOverride;
pin out bit pokeys.[DevID].PEv2.LimitOverrideSetup;
pin out bit pokeys.[DevID].PEv2.digin.Probed.in;
pin out bit pokeys.[DevID].PEv2.digout.Emergency.out;
pin out unsigned pokeys.[DevID].PEv2.AxisEnabledMask;
pin out unsigned pokeys.[DevID].PEv2.AxisEnabledStatesMask;
pin out unsigned pokeys.[DevID].PEv2.ExternalRelayOutputs;
pin out unsigned pokeys.[DevID].PEv2.ExternalOCOutputs;
pin out bit pokeys.[DevID].PEv2.digout.ExternalRelay_out[4];
pin out bit pokeys.[DevID].PEv2.digout.ExternalOC_out[4];
pin out unsigned pokeys.[DevID].PEv2.HomingStartMaskSetup;
pin out unsigned pokeys.[DevID].PEv2.ProbeStartMaskSetup;
pin out unsigned pokeys.[DevID].PEv2.ProbeStatus;
pin out float pokeys.[DevID].PEv2.ProbeSpeed;
pin out bit pokeys.[DevID].PEv2.BacklashCompensationEnabled;

pin out unsigned pokeys.[DevID].PEv2.[PEv2ID].AxesState[8];
pin out unsigned pokeys.[DevID].PEv2.[PEv2ID].AxesConfig[8];
pin out unsigned pokeys.[DevID].PEv2.[PEv2ID].AxesSwitchConfig[8];
pin out int32_t pokeys.[DevID].PEv2.[PEv2ID].SoftLimitMaximum[8];
pin out int32_t pokeys.[DevID].PEv2.[PEv2ID].SoftLimitMinimum[8];
pin out unsigned pokeys.[DevID].PEv2.[PEv2ID].HomingSpeed[8];
pin out unsigned pokeys.[DevID].PEv2.[PEv2ID].HomingReturnSpeed[8];
pin out unsigned pokeys.[DevID].PEv2.[PEv2ID].HomingAlgorithm[8];
pin out int32_t pokeys.[DevID].PEv2.[PEv2ID].HomeOffsets[8];
pin out int32_t pokeys.[DevID].PEv2.[PEv2ID].ProbePosition[8];
pin out int32_t pokeys.[DevID].PEv2.[PEv2ID].ProbeMaxPosition[8];
pin out int32_t pokeys.[DevID].PEv2.[PEv2ID].CurrentPosition[8];
pin out int32_t pokeys.[DevID].PEv2.[PEv2ID].PositionSetup[8];
pin out int32_t pokeys.[DevID].PEv2.[PEv2ID].ReferencePositionSpeed[8];
pin out float pokeys.[DevID].PEv2.[PEv2ID].MaxSpeed[8];
pin out float pokeys.[DevID].PEv2.[PEv2ID].MaxAcceleration[8];
pin out int32_t pokeys.[DevID].PEv2.[PEv2ID].MPGjogMultiplier[8];
pin out unsigned pokeys.[DevID].PEv2.[PEv2ID].MPGjogEncoder[8];
pin out unsigned pokeys.[DevID].PEv2.[PEv2ID].MPGjogDivider[8];
pin out bit pokeys.[DevID].PEv2.[PEv2ID].digin.LimitN.in[8];
pin out bit pokeys.[DevID].PEv2.[PEv2ID].digin.LimitN.in_not[8];
pin out bit pokeys.[DevID].PEv2.[PEv2ID].digin.LimitN.DedicatedInput[8];
pin out bit pokeys.[DevID].PEv2.[PEv2ID].digin.LimitP.in[8];
pin out bit pokeys.[DevID].PEv2.[PEv2ID].digin.LimitP.in_not[8];
pin out bit pokeys.[DevID].PEv2.[PEv2ID].digin.LimitP.DedicatedInput[8];
pin out bit pokeys.[DevID].PEv2.[PEv2ID].digout.AxisEnable.out[8];
pin out bit pokeys.[DevID].PEv2.[PEv2ID].digin.Home.in[8];
pin out bit pokeys.[DevID].PEv2.[PEv2ID].digin.Home.in_not[8];
pin out bit pokeys.[DevID].PEv2.[PEv2ID].digin.Home.DedicatedInput[8];
pin out int32_t pokeys.[DevID].PEv2.[PEv2ID].HomeBackOffDistance[8];
pin out bit pokeys.[DevID].PEv2.[PEv2ID].digin.Error.in[8];
pin out bit pokeys.[DevID].PEv2.[PEv2ID].digin.Error.in_not[8];
pin out bit pokeys.[DevID].PEv2.[PEv2ID].digin.Probe.in[8];
pin out bit pokeys.[DevID].PEv2.[PEv2ID].digin.Probe.in_not[8];
pin out unsigned pokeys.[DevID].PEv2.[PEv2ID].digin.SoftLimit.in[8];
pin out bit pokeys.[DevID].PEv2.[PEv2ID].digout.AxisEnabled.out[8];
pin out bit pokeys.[DevID].PEv2.[PEv2ID].digin.AxisEnabled.in[8];
pin out bit pokeys.[DevID].PEv2.[PEv2ID].digout.LimitOverride.out[8];
pin out unsigned pokeys.[DevID].PEv2.[PEv2ID].BacklashWidth[8];
pin out int16_t pokeys.[DevID].PEv2.[PEv2ID].BacklashRegister[8];
pin out unsigned pokeys.[DevID].PEv2.[PEv2ID].BacklashAcceleration[8];

pin param unsigned pokeys.[DevID].PEv2.digin.Emergency.Pin;
pin param unsigned pokeys.[DevID].PEv2.digin.Emergency.invert;
pin param unsigned pokeys.[DevID].PEv2.digout.Emergency.Pin;
pin param unsigned pokeys.[DevID].PEv2.digin.Probe.Pin;
pin param unsigned pokeys.[DevID].PEv2.digin.Probe.invert;

pin param unsigned pokeys.[DevID].PEv2.[PEv2ID].digin.SoftLimit.PosMin[8];
pin param unsigned pokeys.[DevID].PEv2.[PEv2ID].digin.SoftLimit.PosMax[8];
pin param unsigned pokeys.[DevID].PEv2.[PEv2ID].digin.Home.Offset[8];
pin param unsigned pokeys.[DevID].PEv2.[PEv2ID].digin.LimitN.Pin[8];
pin param unsigned pokeys.[DevID].PEv2.[PEv2ID].digin.LimitN.Filter[8];
pin param unsigned pokeys.[DevID].PEv2.[PEv2ID].digin.LimitN.invert[8];
pin param unsigned pokeys.[DevID].PEv2.[PEv2ID].digin.LimitP.Pin[8];
pin param unsigned pokeys.[DevID].PEv2.[PEv2ID].digin.LimitP.Filter[8];
pin param unsigned pokeys.[DevID].PEv2.[PEv2ID].digin.LimitP.invert[8];
pin param unsigned pokeys.[DevID].PEv2.[PEv2ID].digout.AxisEnable.Pin[8];
pin param unsigned pokeys.[DevID].PEv2.[PEv2ID].digout.AxisEnable.invert[8];
pin param unsigned pokeys.[DevID].PEv2.[PEv2ID].digin.Home.Pin[8];
pin param unsigned pokeys.[DevID].PEv2.[PEv2ID].digin.Home.Filter[8];
pin param unsigned pokeys.[DevID].PEv2.[PEv2ID].digin.Home.invert[8];

license "GPL";
author "Dominik Zarfl";

;;

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "PoKeysLib.h"

sPoKeysDevice* device;

void setup_pins() {
    for (int i = 0; i < 8; i++) {
        if (hal_pin_float_newf(HAL_IN, &(position_cmd[i]), comp_id, "pokeys_pev2.position_cmd.%d", i) < 0) {
            rtapi_print_msg(RTAPI_MSG_ERR, "ERROR: could not create position_cmd pin %d\n", i);
            exit(1);
        }
        if (hal_pin_float_newf(HAL_OUT, &(position_fb[i]), comp_id, "pokeys_pev2.position_fb.%d", i) < 0) {
            rtapi_print_msg(RTAPI_MSG_ERR, "ERROR: could not create position_fb pin %d\n", i);
            exit(1);
        }
        if (hal_pin_bit_newf(HAL_OUT, &(homing_status[i]), comp_id, "pokeys_pev2.homing_status.%d", i) < 0) {
            rtapi_print_msg(RTAPI_MSG_ERR, "ERROR: could not create homing_status pin %d\n", i);
            exit(1);
        }
    }
}

void initialize_device_info_pins() {
    pokeys.[DevID].info.PinCount = PK_GetPinCount(device);
    pokeys.[DevID].info.PWMCount = PK_GetPWMCount(device);
    pokeys.[DevID].info.BasicEncoderCount = PK_GetBasicEncoderCount(device);
    pokeys.[DevID].info.EncodersCount = PK_GetEncodersCount(device);
    pokeys.[DevID].info.FastEncoders = PK_GetFastEncoders(device);
    pokeys.[DevID].info.UltraFastEncoders = PK_GetUltraFastEncoders(device);
    pokeys.[DevID].info.PWMinternalFrequency = PK_GetPWMinternalFrequency(device);
    pokeys.[DevID].info.AnalogInputs = PK_GetAnalogInputs(device);
    pokeys.[DevID].info.KeyMapping = PK_GetKeyMapping(device);
    pokeys.[DevID].info.TriggeredKeyMapping = PK_GetTriggeredKeyMapping(device);
    pokeys.[DevID].info.KeyRepeatDelay = PK_GetKeyRepeatDelay(device);
    pokeys.[DevID].info.DigitalCounters = PK_GetDigitalCounters(device);
    pokeys.[DevID].info.JoystickButtonAxisMapping = PK_GetJoystickButtonAxisMapping(device);
    pokeys.[DevID].info.JoystickAnalogToDigitalMapping = PK_GetJoystickAnalogToDigitalMapping(device);
    pokeys.[DevID].info.Macros = PK_GetMacros(device);
    pokeys.[DevID].info.MatrixKeyboard = PK_GetMatrixKeyboard(device);
    pokeys.[DevID].info.MatrixKeyboardTriggeredMapping = PK_GetMatrixKeyboardTriggeredMapping(device);
    pokeys.[DevID].info.LCD = PK_GetLCD(device);
    pokeys.[DevID].info.MatrixLED = PK_GetMatrixLED(device);
    pokeys.[DevID].info.ConnectionSignal = PK_GetConnectionSignal(device);
    pokeys.[DevID].info.PoExtBus = PK_GetPoExtBus(device);
    pokeys.[DevID].info.PoNET = PK_GetPoNET(device);
    pokeys.[DevID].info.AnalogFiltering = PK_GetAnalogFiltering(device);
    pokeys.[DevID].info.InitOutputsStart = PK_GetInitOutputsStart(device);
    pokeys.[DevID].info.protI2C = PK_GetprotI2C(device);
    pokeys.[DevID].info.prot1wire = PK_Getprot1wire(device);
    pokeys.[DevID].info.AdditionalOptions = PK_GetAdditionalOptions(device);
    pokeys.[DevID].info.LoadStatus = PK_GetLoadStatus(device);
    pokeys.[DevID].info.CustomDeviceName = PK_GetCustomDeviceName(device);
    pokeys.[DevID].info.PoTLog27support = PK_GetPoTLog27support(device);
    pokeys.[DevID].info.SensorList = PK_GetSensorList(device);
    pokeys.[DevID].info.WebInterface = PK_GetWebInterface(device);
    pokeys.[DevID].info.FailSafeSettings = PK_GetFailSafeSettings(device);
    pokeys.[DevID].info.JoystickHATswitch = PK_GetJoystickHATswitch(device);
    pokeys.[DevID].info.PulseEngine = PK_GetPulseEngine(device);
    pokeys.[DevID].info.PulseEnginev2 = PK_GetPulseEnginev2(device);
    pokeys.[DevID].info.EasySensors = PK_GetEasySensors(device);
}

void user_mainloop() {
    while (1) {
        for (int i = 0; i < 8; i++) {
            position_fb[i] = PK_PEv2_GetPosition(device, i);
            homing_status[i] = PK_PEv2_GetHomingStatus(device, i);
        }
        usleep(10000);
    }
}

int rtapi_app_main(void) {
    comp_id = hal_init("pokeys_pev2");
    if (comp_id < 0) {
        rtapi_print_msg(RTAPI_MSG_ERR, "pokeys_pev2: ERROR: hal_init() failed\n");
        return -1;
    }

    device = PK_ConnectToDevice(0);
    if (device == NULL) {
        rtapi_print_msg(RTAPI_MSG_ERR, "pokeys_pev2: ERROR: could not connect to PoKeys device\n");
        return -1;
    }

    setup_pins();
    initialize_device_info_pins();

    hal_ready(comp_id);
    rtapi_print_msg(RTAPI_MSG_INFO, "pokeys_pev2: installed\n");

    // Unit tests for PEv2-related functionalities
    for (int i = 0; i < 8; i++) {
        // Test position feedback (pos-fb)
        float expected_position = 1.23 * i;
        PK_PEv2_SetPosition(device, i, expected_position);
        float actual_position = PK_PEv2_GetPosition(device, i);
        if (actual_position != expected_position) {
            rtapi_print_msg(RTAPI_MSG_ERR, "pokeys_pev2: ERROR: position feedback pin %d expected %f but got %f\n", i, expected_position, actual_position);
            return -1;
        }

        // Test velocity commands
        float expected_velocity = 0.5 * i;
        PK_PEv2_SetVelocity(device, i, expected_velocity);
        float actual_velocity = PK_PEv2_GetVelocity(device, i);
        if (actual_velocity != expected_velocity) {
            rtapi_print_msg(RTAPI_MSG_ERR, "pokeys_pev2: ERROR: velocity command pin %d expected %f but got %f\n", i, expected_velocity, actual_velocity);
            return -1;
        }

        // Verify homing routines and axis states
        PK_PEv2_StartHoming(device, i);
        int homing_status = PK_PEv2_GetHomingStatus(device, i);
        if (homing_status != 11) {  // PK_PEAxisState_axHOMINGSTART
            rtapi_print_msg(RTAPI_MSG_ERR, "pokeys_pev2: ERROR: homing status pin %d expected %d but got %d\n", i, 11, homing_status);
            return -1;
        }
        PK_PEv2_CancelHoming(device, i);
    }

    return 0;
}

void rtapi_app_exit(void) {
    if (device != NULL) {
        PK_DisconnectDevice(device);
    }
    hal_exit(comp_id);
}
