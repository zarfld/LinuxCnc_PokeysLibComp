component pokeys_pwm "PWM component for PoKeys";

option userspace yes;

pin in float pwm_in.# [6];
pin out float pwm_out.# [6];

license "GPL";
author "Dominik Zarfl";

;;

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "PoKeysLib.h"

sPoKeysDevice* device;

void setup_pins() {
    for (int i = 0; i < 6; i++) {
        if (hal_pin_float_newf(HAL_IN, &(pwm_in[i]), comp_id, "pokeys_pwm.pwm_in.%d", i) < 0) {
            rtapi_print_msg(RTAPI_MSG_ERR, "ERROR: could not create pwm_in pin %d\n", i);
            exit(1);
        }
        if (hal_pin_float_newf(HAL_OUT, &(pwm_out[i]), comp_id, "pokeys_pwm.pwm_out.%d", i) < 0) {
            rtapi_print_msg(RTAPI_MSG_ERR, "ERROR: could not create pwm_out pin %d\n", i);
            exit(1);
        }
    }
}

void user_mainloop() {
    while (1) {
        for (int i = 0; i < 6; i++) {
            pwm_out[i] = PK_SL_PWM_GetDuty(device, i);
            PK_SL_PWM_SetDuty(device, i, pwm_in[i]);
        }
        usleep(10000);
    }
}

int rtapi_app_main(void) {
    comp_id = hal_init("pokeys_pwm");
    if (comp_id < 0) {
        rtapi_print_msg(RTAPI_MSG_ERR, "pokeys_pwm: ERROR: hal_init() failed\n");
        return -1;
    }

    device = PK_ConnectToDevice(0);
    if (device == NULL) {
        rtapi_print_msg(RTAPI_MSG_ERR, "pokeys_pwm: ERROR: could not connect to PoKeys device\n");
        return -1;
    }

    setup_pins();

    hal_ready(comp_id);
    rtapi_print_msg(RTAPI_MSG_INFO, "pokeys_pwm: installed\n");

    // Unit tests for PWM functionality
    for (int i = 0; i < 6; i++) {
        // Test correct mapping of PWM pins
        float expected_duty_cycle = 50.0 * i;
        PK_SL_PWM_SetDuty(device, i, expected_duty_cycle);
        float actual_duty_cycle = PK_SL_PWM_GetDuty(device, i);
        if (actual_duty_cycle != expected_duty_cycle) {
            rtapi_print_msg(RTAPI_MSG_ERR, "pokeys_pwm: ERROR: PWM pin %d expected %f but got %f\n", i, expected_duty_cycle, actual_duty_cycle);
            return -1;
        }

        // Test state changes and expected values
        PK_SL_PWM_SetDuty(device, i, 100.0 - expected_duty_cycle);
        actual_duty_cycle = PK_SL_PWM_GetDuty(device, i);
        if (actual_duty_cycle != 100.0 - expected_duty_cycle) {
            rtapi_print_msg(RTAPI_MSG_ERR, "pokeys_pwm: ERROR: PWM pin %d state change expected %f but got %f\n", i, 100.0 - expected_duty_cycle, actual_duty_cycle);
            return -1;
        }
    }

    return 0;
}

void rtapi_app_exit(void) {
    if (device != NULL) {
        PK_DisconnectDevice(device);
    }
    hal_exit(comp_id);
}
